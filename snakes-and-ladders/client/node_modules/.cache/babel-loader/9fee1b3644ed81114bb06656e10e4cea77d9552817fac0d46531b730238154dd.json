{"ast":null,"code":"var _jsxFileName = \"/home/anirudh/Desktop/Programming/WebD/snakes-and-ladders/client/src/components/dice.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Dice({\n  players,\n  winner,\n  index,\n  setIndex,\n  socket,\n  turnIndex\n}) {\n  _s();\n  const [rolledNum, setRolledNum] = useState(0);\n  const size = players.length;\n  const [yourTurn, setYourTurn] = useState(false);\n  const room = 'room_id'; // You should replace this with dynamic room ID if needed\n\n  useEffect(() => {\n    if (players.length > 0) {\n      // Find the index of the current player\n      const playerIndex = players.findIndex(player => player.socketId === socket.id);\n      setIndex(playerIndex); // Update index state\n      setYourTurn(turnIndex === playerIndex); // Check if it's this player's turn\n    }\n  }, [players, turnIndex, socket.id, setIndex]); // Added socket.id and setIndex as dependencies\n\n  function roll() {\n    if (yourTurn) {\n      const rolled = Math.floor(Math.random() * 6) + 1;\n      setRolledNum(rolled);\n      socket.emit('roll_dice', {\n        room,\n        rolledNum\n      }); // Emit roll dice event with room ID and rolled number\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diceBody\",\n    children: winner === '' ? size > 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"numberRolled\",\n        children: [\"Number: \", rolledNum]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerCall\",\n        children: [\"Player \", index + 1, \"'s turn!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: roll,\n        className: \"roll\",\n        children: \"ROLL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Add players to start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [winner, \" is the winner!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(Dice, \"WCwmwIJKMmtOvjF4wo1KDUOByHE=\");\n_c = Dice;\nexport default Dice;\nvar _c;\n$RefreshReg$(_c, \"Dice\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Dice","players","winner","index","setIndex","socket","turnIndex","_s","rolledNum","setRolledNum","size","length","yourTurn","setYourTurn","room","playerIndex","findIndex","player","socketId","id","roll","rolled","Math","floor","random","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/anirudh/Desktop/Programming/WebD/snakes-and-ladders/client/src/components/dice.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction Dice({ players, winner, index, setIndex, socket, turnIndex }) {\n    const [rolledNum, setRolledNum] = useState(0);\n    const size = players.length;\n    const [yourTurn, setYourTurn] = useState(false);\n    const room = 'room_id'; // You should replace this with dynamic room ID if needed\n\n    useEffect(() => {\n        if (players.length > 0) {\n            // Find the index of the current player\n            const playerIndex = players.findIndex(player => player.socketId === socket.id);\n            setIndex(playerIndex); // Update index state\n            setYourTurn(turnIndex === playerIndex); // Check if it's this player's turn\n        }\n    }, [players, turnIndex, socket.id, setIndex]); // Added socket.id and setIndex as dependencies\n\n    function roll() {\n        if (yourTurn) {\n            const rolled = Math.floor(Math.random() * 6) + 1;\n            setRolledNum(rolled);\n            socket.emit('roll_dice', { room, rolledNum }); // Emit roll dice event with room ID and rolled number\n        }\n    }\n\n    return (\n        <div className=\"diceBody\">\n            {winner === '' ? (\n                size > 1 ? ( \n                    <>\n                        <div className=\"numberRolled\">Number: {rolledNum}</div>\n                        <div className=\"playerCall\">Player {index + 1}'s turn!</div>\n                        <button onClick={roll} className=\"roll\">ROLL</button>\n                    </>\n                ) : (\n                    <div>Add players to start</div>\n                )\n            ) : (\n                <div>{winner} is the winner!</div>\n            )}\n        </div>\n    );\n}\n\nexport default Dice;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,SAASC,IAAIA,CAAC;EAAEC,OAAO;EAAEC,MAAM;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACnE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAMgB,IAAI,GAAGT,OAAO,CAACU,MAAM;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAMoB,IAAI,GAAG,SAAS,CAAC,CAAC;;EAExBnB,SAAS,CAAC,MAAM;IACZ,IAAIM,OAAO,CAACU,MAAM,GAAG,CAAC,EAAE;MACpB;MACA,MAAMI,WAAW,GAAGd,OAAO,CAACe,SAAS,CAACC,MAAM,IAAIA,MAAM,CAACC,QAAQ,KAAKb,MAAM,CAACc,EAAE,CAAC;MAC9Ef,QAAQ,CAACW,WAAW,CAAC,CAAC,CAAC;MACvBF,WAAW,CAACP,SAAS,KAAKS,WAAW,CAAC,CAAC,CAAC;IAC5C;EACJ,CAAC,EAAE,CAACd,OAAO,EAAEK,SAAS,EAAED,MAAM,CAACc,EAAE,EAAEf,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE/C,SAASgB,IAAIA,CAAA,EAAG;IACZ,IAAIR,QAAQ,EAAE;MACV,MAAMS,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAChDf,YAAY,CAACY,MAAM,CAAC;MACpBhB,MAAM,CAACoB,IAAI,CAAC,WAAW,EAAE;QAAEX,IAAI;QAAEN;MAAU,CAAC,CAAC,CAAC,CAAC;IACnD;EACJ;EAEA,oBACIX,OAAA;IAAK6B,SAAS,EAAC,UAAU;IAAAC,QAAA,EACpBzB,MAAM,KAAK,EAAE,GACVQ,IAAI,GAAG,CAAC,gBACJb,OAAA,CAAAE,SAAA;MAAA4B,QAAA,gBACI9B,OAAA;QAAK6B,SAAS,EAAC,cAAc;QAAAC,QAAA,GAAC,UAAQ,EAACnB,SAAS;MAAA;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACvDlC,OAAA;QAAK6B,SAAS,EAAC,YAAY;QAAAC,QAAA,GAAC,SAAO,EAACxB,KAAK,GAAG,CAAC,EAAC,UAAQ;MAAA;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC5DlC,OAAA;QAAQmC,OAAO,EAAEZ,IAAK;QAACM,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACvD,CAAC,gBAEHlC,OAAA;MAAA8B,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACjC,gBAEDlC,OAAA;MAAA8B,QAAA,GAAMzB,MAAM,EAAC,iBAAe;IAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EACpC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACxB,EAAA,CAxCQP,IAAI;AAAAiC,EAAA,GAAJjC,IAAI;AA0Cb,eAAeA,IAAI;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}